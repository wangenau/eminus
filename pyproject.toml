# SPDX-FileCopyrightText: 2021 The eminus developers
# SPDX-License-Identifier: Apache-2.0
### Build backend ###
[build-system]
requires = ["setuptools>=64"]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
version = {attr = "eminus.version.__version__"}

### Metadata ###
[project]
name = "eminus"
dynamic = ["version"]
dependencies = [
    "numpy>=1.17",
    "scipy>=1.6"
]
requires-python = ">=3.7"
authors = [{name = "Wanja Timm Schulze", email = "wangenau@protonmail.com"}]
description = "A pythonic plane wave density functional theory (DFT) code."
readme = "README.md"
keywords = ["Python", "DFT", "DFT++"]
classifiers = [
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Intended Audience :: Education",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved",
        "License :: OSI Approved :: Apache Software License",
        "Operating System :: MacOS",
        "Operating System :: Microsoft :: Windows",
        "Operating System :: POSIX",
        "Operating System :: Unix",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Topic :: Education",
        "Topic :: Scientific/Engineering",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Scientific/Engineering :: Physics",
        "Topic :: Software Development",
]

[project.optional-dependencies]
dispersion = [
    "dftd3>=0.6",  # Interface for DFT-D3 dispersion corrections
]
libxc = [
    "pyscf>=2.1",  # Libxc interface via PySCF
]
torch = [
    "torch>=1.8",  # Faster FFT operators
]
viewer = [
    "nglview>=2.6.5",  # Molecule viewer
    "plotly>=4.5",  # Various visualizations
]
fods = ["eminus[libxc]"]  # PyCOM FOD guessing method uses PySCF
symmetry = ["eminus[libxc]"]  # k-point symmetrization uses PySCF
all = ["eminus[dispersion]", "eminus[libxc]", "eminus[torch]", "eminus[viewer]"]
dev = [
    "coverage>=4.4",  # Generate coverage reports
    "furo>=2022.02.14.1",  # Documentation theme
    "matplotlib>=1.5",  # Plotting library for examples
    "mypy>=0.990",  # Static type checker
    "notebook",  # Run and convert notebooks to HTML
    "pytest>=5.4",  # Test utilities
    "ruff>=0.2",  # Linter
    "sphinx>=4",  # Documentation builder
    "sphinx-design>=0.2",  # More directives for Sphinx
    "sphinxcontrib-bibtex>=2",  # Use bib files for citations in Sphinx
]

[project.urls]
Homepage = "https://github.com/wangenau/eminus"
Documentation = "https://wangenau.gitlab.io/eminus"
Repository = "https://gitlab.com/wangenau/eminus"
Issues = "https://gitlab.com/wangenau/eminus/-/issues"
Changelog = "https://wangenau.gitlab.io/eminus/changelog.html"

### Coverage ###
[tool.coverage.report]
exclude_lines = [
    "if __name__ == '__main__':",
    "except ImportError:",
]

[tool.coverage.run]
include = ["eminus/*"]
omit = ["eminus/extras/*"]

### Mypy ###
[tool.mypy]
python_version = "3.7"
exclude = ["public"]
strict = true
ignore_missing_imports = true
disable_error_code = [
    # Many setter methods change the variable type, this is not considered by Mypy
    # Reference: https://github.com/python/mypy/issues/3004
    "assignment",  # Incompatible types in assignment  [assignment]
]

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = [
    # The tests folder has functions with missing type annotations
    "no-untyped-def",  # Function is missing a type annotation  [no-untyped-def]
]

### Pytest ###
[tool.pytest.ini_options]
addopts = "-rsxX"
markers = ["slow: test runs longer than five seconds."]
norecursedirs = "public/*"

### Ruff ###
[tool.ruff]
target-version = "py37"
extend-include = ["*.ipynb"]
line-length = 100
respect-gitignore = true

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "E741", "E743",  # Ambiguous variable or function names
    "N802", "N803", "N806",  # Function, argument, or variable names in function should be lowercase
    "ANN",  # flake8-annotations
    "FBT001", "FBT002",  # Boolean (default) positional argument in function definition
    "INP001",  # File is part of an implicit namespace package
    "T201",  # print found
    "SLF001",  # Private member accessed
    "SIM108",  # Use ternary operator instead of if-else-block
    "TID252",  # Prefer absolute imports over relative imports from parent modules
    "PTH123",  # open() should be replaced by Path.open()
    "ERA001",  # Found commented-out code
    "PLR0912", "PLR0913", "PLR2004",  # Too many branches, arguments to functions, or magic values
    # The following rules are disabled due to possible conflicts with the formatter
    "Q000", "Q003",  # Double quotes preferred, change outer quotes to avoid escaping inner quotes
    "COM812",  # Trailing comma missing
    "ISC001",  # Implicitly concatenated string literals on one line
]

[tool.ruff.lint.per-file-ignores]
"examples/*" = [
    "D100", "D103",  # Missing docstring in public module or function
    "E501",  # Line too long
    "PTH207",  # Replace glob with Path.glob or Path.rglob
    "PGH003",  # Use specific rule codes when ignoring type issues
]
"tests/*" = [
    "S101",  # Use of assert detected
    "PTH107",  # os.remove() should be replaced by Path.unlink()
]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
order-by-type = false

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"
