# SPDX-FileCopyrightText: 2021 The eminus developers
# SPDX-License-Identifier: Apache-2.0
### build-system ###
[build-system]
requires = ["setuptools>=1.2"]
build-backend = "setuptools.build_meta"

### Coverage ###
[tool.coverage.report]
exclude_lines = [
    "if __name__ == '__main__':",
    "except ImportError:",
]

[tool.coverage.run]
include = ["eminus/*"]
omit = ["eminus/extras/*"]

### Mypy ###
[tool.mypy]
python_version = "3.7"
exclude = ["public"]
strict = true
ignore_missing_imports = true
disable_error_code = [
    # Many setter methods change the variable type, this is not considered by Mypy
    # Reference: https://github.com/python/mypy/issues/3004
    "assignment",  # Incompatible types in assignment  [assignment]
]

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = [
    # The tests folder has functions with missing type annotations
    "no-untyped-def",  # Function is missing a type annotation  [no-untyped-def]
]

### Pytest ###
[tool.pytest.ini_options]
addopts = "-rsxX"
markers = ["slow: test runs longer than five seconds."]
norecursedirs = "public/*"

### Ruff ###
[tool.ruff]
target-version = "py37"
extend-include = ["*.ipynb"]
line-length = 100
respect-gitignore = true

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "E741", "E743",  # Ambiguous variable or function names
    "N802", "N803", "N806",  # Function, argument, or variable names in function should be lowercase
    "ANN",  # flake8-annotations
    "FBT001", "FBT002",  # Boolean (default) positional argument in function definition
    "COM812",  # Trailing comma missing
    "EM101", "EM102",  # Assign literal in exception to variable first
    "ISC001",  # Implicitly concatenated string literals on one line
    "G004",  # Logging statement uses f-string
    "INP001",  # File is part of an implicit namespace package
    "T201",  # print found
    "Q000", "Q003",  # Double quotes preferred, Change outer quotes to avoid escaping inner quotes
    "SLF001",  # Private member accessed
    "SIM108",  # Use ternary operator instead of if-else-block
    "TID252",  # Prefer absolute imports over relative imports from parent modules
    "PTH123",  # open() should be replaced by Path.open()
    "ERA001",  # Found commented-out code
    "PLR0912", "PLR0913", "PLR2004",  # Too many branches, arguments to functions, or magic values
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.per-file-ignores]
"examples/*" = [
    "D100", "D103",  # Missing docstring in public module or function
    "E501",  # Line too long
    "PTH207",  # Replace glob with Path.glob or Path.rglob
    "PGH003",  # Use specific rule codes when ignoring type issues
]
"tests/*" = [
    "S101",  # Use of assert detected
    "ARG001",  # Unused function argument
    "PTH107",  # os.remove() should be replaced by Path.unlink()
]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
order-by-type = false

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"
