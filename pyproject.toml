# SPDX-FileCopyrightText: 2021 The eminus developers
# SPDX-License-Identifier: Apache-2.0
### build-system ###
[build-system]
requires = ["setuptools>=1.2"]
build-backend = "setuptools.build_meta"

### Coverage ###
[tool.coverage.report]
exclude_lines = [
    "if __name__ == '__main__':",
    "except ImportError:",
]

[tool.coverage.run]
include = ["eminus/*"]
omit = ["eminus/extras/*"]

### Mypy ###
[tool.mypy]
python_version = "3.7"
exclude = ["public"]
strict = true
ignore_missing_imports = true
disable_error_code = [
    # Incompatible types in assignment  [assignment]
    # Many setter methods change the variable type, this is not considered by Mypy
    # Reference: https://github.com/python/mypy/issues/3004
    "assignment",
]

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = [
    # Function is missing a type annotation  [no-untyped-def]
    # The tests folder has functions with missing type annotations
    "no-untyped-def",
]

### Pytest ###
[tool.pytest.ini_options]
addopts = "-rsxX"
markers = ["slow: test runs longer than five seconds."]
norecursedirs = "public/*"

### Ruff ###
[tool.ruff]
target-version = "py37"
extend-include = ["*.ipynb"]
line-length = 100
respect-gitignore = true

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
select = [
    "F",       # Pyflakes
    "E", "W",  # pycodestyle
    "C90",     # mccabe
    "I",       # isort
    "D",       # pydocstyle
    "UP",      # pyupgrade
    "S",       # flake8-bandit
    "BLE",     # flake8-blind-except
    "B",       # flake8-bugbear
    "A",       # flake8-builtins
    "C4",      # flake8-comprehensions
    "FA",      # flake8-future-annotations
    "ISC",     # flake8-implicit-str-concat
    "ICN",     # flake8-import-conventions
    "LOG",     # flake8-logging
    "PIE",     # flake8-pie
    "PYI",     # flake8-pyi
    "PT",      # flake8-pytest-style
    "RSE",     # flake8-raise
    "RET",     # flake8-return
    "SIM",     # flake8-simplify
    "TCH",     # flake8-type-checking
    "PL",      # Pylint
    "NPY",     # NumPy-specific rules
    "PERF",    # Perflint
    "RUF",     # Ruff-specific rules
]

ignore = [
    # E741, E743: Ambiguous variable and function names
    # eminus uses, e.g., l (quantum number) as variables or O (overlap operator) as functions
    "E741", "E743",
    # SIM108: Use ternary operator instead of `if`-`else`-block
    # if-else blocks should be written down explicitly
    "SIM108",
    # PLR0911, PLR0912, PLR0913: Too many return statements, branches, or arguments to function call
    # PLR2004: Magic value used in comparison
    # These rules feel too restrictive for now
    "PLR0912", "PLR0913", "PLR2004",
]

[tool.ruff.lint.per-file-ignores]
"examples/*" = [
    # D100, D103: Missing docstring in public module, or function
    "D100", "D103",
    # E501: Line too long
    "E501",
]
"tests/*" = [
    # S101: Use of `assert` detected
    "S101",
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
order-by-type = false

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"
