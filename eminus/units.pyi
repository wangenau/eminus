# SPDX-FileCopyrightText: 2021 The eminus developers
# SPDX-License-Identifier: Apache-2.0
from typing import overload

from numpy import float64
from numpy.typing import NDArray

electronvolt: float
eV: float  # noqa: N816
kcalmol: float
Angstrom: float
A: float
Debye: float
D: float
Kelvin: float
K: float

@overload
def ha2ev(E: float) -> float: ...
@overload
def ha2ev(E: NDArray[float64]) -> NDArray[float64]: ...
@overload
def ev2ha(E: float) -> float: ...
@overload
def ev2ha(E: NDArray[float64]) -> NDArray[float64]: ...
@overload
def ha2kcalmol(E: float) -> float: ...
@overload
def ha2kcalmol(E: NDArray[float64]) -> NDArray[float64]: ...
@overload
def kcalmol2ha(E: float) -> float: ...
@overload
def kcalmol2ha(E: NDArray[float64]) -> NDArray[float64]: ...
@overload
def ha2ry(E: float) -> float: ...
@overload
def ha2ry(E: NDArray[float64]) -> NDArray[float64]: ...
@overload
def ry2ha(E: float) -> float: ...
@overload
def ry2ha(E: NDArray[float64]) -> NDArray[float64]: ...
@overload
def ha2kelvin(E: float) -> float: ...
@overload
def ha2kelvin(E: NDArray[float64]) -> NDArray[float64]: ...
@overload
def kelvin2ha(T: float) -> float: ...
@overload
def kelvin2ha(T: NDArray[float64]) -> NDArray[float64]: ...
@overload
def ang2bohr(r: float) -> float: ...
@overload
def ang2bohr(r: NDArray[float64]) -> NDArray[float64]: ...
@overload
def bohr2ang(r: float) -> float: ...
@overload
def bohr2ang(r: NDArray[float64]) -> NDArray[float64]: ...
@overload
def ebohr2d(p: float) -> float: ...

# If one calls linalg.norm the return type is floating and not catched by the float type hint
@overload
def ebohr2d(p: float64) -> float64: ...
@overload
def ebohr2d(p: NDArray[float64]) -> NDArray[float64]: ...
@overload
def d2ebohr(p: float) -> float: ...
@overload
def d2ebohr(p: NDArray[float64]) -> NDArray[float64]: ...
@overload
def rad2deg(a: float) -> float: ...
@overload
def rad2deg(a: NDArray[float64]) -> NDArray[float64]: ...
@overload
def deg2rad(a: float) -> float: ...
@overload
def deg2rad(a: NDArray[float64]) -> NDArray[float64]: ...
