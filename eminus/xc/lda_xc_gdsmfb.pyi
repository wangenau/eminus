# SPDX-FileCopyrightText: 2024 The eminus developers
# SPDX-License-Identifier: Apache-2.0
from dataclasses import dataclass
from typing import Any, TypeAlias

from numpy import floating
from numpy.typing import NDArray

from .lda_xc_ksdt import Coefficients

_Float: TypeAlias = floating[Any]
_ArrayReal: TypeAlias = NDArray[_Float]

@dataclass
class Zeta0Coeffs(Coefficients):
    omega: float = ...
    b1: float = ...
    b2: float = ...
    b3: float = ...
    b4: float = ...
    c1: float = ...
    c2: float = ...
    c3: float = ...
    d1: float = ...
    d2: float = ...
    d3: float = ...
    d4: float = ...
    d5: float = ...
    e1: float = ...
    e2: float = ...
    e3: float = ...
    e4: float = ...
    e5: float = ...

@dataclass
class Zeta1Coeffs(Coefficients):
    omega: float = ...
    b1: float = ...
    b2: float = ...
    b3: float = ...
    b4: float = ...
    c1: float = ...
    c2: float = ...
    c3: float = ...
    d1: float = ...
    d2: float = ...
    d3: float = ...
    d4: float = ...
    d5: float = ...
    e1: float = ...
    e2: float = ...
    e3: float = ...
    e4: float = ...
    e5: float = ...

@dataclass
class PhiParams:
    g1: float = ...
    g2: float = ...
    g3: float = ...
    lambda1: float = ...
    lambda2: float = ...

def lda_xc_gdsmfb(
    n: _ArrayReal,
    T: float = ...,
    **kwargs: Any,
) -> tuple[_ArrayReal, _ArrayReal, None]: ...
def lda_xc_gdsmfb_spin(
    n: _ArrayReal,
    zeta: _ArrayReal,
    T: float = ...,
    **kwargs: Any,
) -> tuple[_ArrayReal, _ArrayReal, None]: ...
